/*  conquering-codeforces
 *  day 14. #160A
 *
 *  Задача: Проснувшись, Вы нашли оставленные мамой монеты и прочитали записку. «Но зачем делить монеты поровну?» —
 *          подумали Вы, ведь Ваш близнец еще спит и ничего не узнает. Поэтому Вы решили поступить следующим образом:
 *          выбрать себе некоторое подмножество монет, так чтобы сумма достоинств взятых Вами монет оказалась строго
 *          больше, чем сумма достоинств оставшейся части монет, которая достанется Вашему близнецу. Однако,
 *          Вы справедливо решили, что если взять слишком много монет, то Ваш близнец подумает, что Вы его обманули.
 *          Поэтому, чтобы не вызывать подозрений, Вы решили взять наименьшее количество монет, сумма достоинств
 *          которых окажется строго больше суммы достоинств оставшихся. Исходя из этого, выясните, какое минимальное
 *          количество монет Вам понадобится взять, чтобы разделить их описанным образом.
 *  Входные данные: В первой строке задано целое число n (1 ≤ n ≤ 100) — количество монет.
 *                  Во второй строке задана последовательность из n целых чисел a1, a2, ..., an (1 ≤ ai ≤ 100) —
 *                  достоинства монет. Все числа разделены пробелами.
 *  Выходные данные: В единственной строке выведите одно число — минимальное необходимое количество монет.
 */

import java.util.Arrays;
import java.util.Scanner;

public class CF160A
{
    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        scanner.nextLine();

        int[] coins = new int[n];

        int sum = 0;

        for (int i = 0; i < n; i++) {
            coins[i] = scanner.nextInt();

            sum += coins[i];
        }

        int border = sum / 2 + 1;

        Arrays.sort(coins);

        int k = 0;
        int sum_one = 0;

        for (int i = coins.length - 1; i >= 0; i--) {
            sum_one += coins[i];
            k += 1;

            if (sum_one > border) {
                break;
            }
        }

        System.out.println(k);
    }
}
