/*  conquering-codeforces
 *  day 17. #263A
 *
 *  Задача: Перед Вами матрица размера 5 × 5, состоящая из 24-x нулей и единственной единицы. Строки матрицы
 *          пронумеруем числами от 1 до 5 сверху вниз, столбцы матрицы пронумеруем числами от 1 до 5 слева направо.
 *          За один ход разрешается применить к матрице одно из двух следующих преобразований:
 *          Поменять местами две соседние строки матрицы, то есть строки с номерами i и i + 1 для некоторого
 *          целого i (1 ≤ i < 5).
 *          Поменять местами два соседних столбца матрицы, то есть столбцы с номерами j и j + 1 для некоторого
 *          целого j (1 ≤ j < 5).
 *          Вы считаете, что матрица будет выглядеть красиво, если единственная единица этой матрицы будет находиться
 *          в ее центре (в клетке, которая находится на пересечении третьей строки и третьего столбца). Посчитайте,
 *          какое минимальное количество ходов потребуется, чтобы сделать матрицу красивой.
 *  Входные данные: Входные данные состоят из пяти строк, в каждой из которых записаны пять целых чисел: j-ое число
 *                  в i-ой строке входных данных обозначает элемент матрицы, стоящий на пересечении i-ой строки и
 *                  j-ого столбца. Гарантируется, что матрица состоит из 24-x нулей и единственной единицы.
 *  Выходные данные: Выведите единственное целое число — минимальное количество действий, которое требуется,
 *                   чтобы сделать матрицу красивой.
 */

import java.util.Scanner;

public class CF263A
{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int[][] matrix = new int[5][5];

        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                matrix[i][j] = scanner.nextInt();
            }

            scanner.nextLine();
        }

        int k = 0;
        int index_i = 0;
        int index_j = 0;

        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (matrix[i][j] == 1) {
                    index_i = i;
                    index_j = j;
                }
            }
        }

        /*
         * A loop for working with lines
         */
        while (index_i != 2) {
            if (index_i < 2) {
                index_i += 1;
                k += 1;
            }
            else {
                index_i -= 1;
                k += 1;
            }
        }

        /*
         * A loop for working with rows
         */
        while (index_j != 2) {
            if (index_j < 2) {
                index_j += 1;
                k += 1;
            }
            else {
                index_j -= 1;
                k += 1;
            }
        }

        System.out.println(k);
    }
}
