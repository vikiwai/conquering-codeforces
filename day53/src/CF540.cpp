/*  conquering-codeforces
 *  day 53. #540A
 *
 *  Задача: Скрудж МакДак держит свои самые сокровенные сбережения в сейфе, защищенном кодовым замком. Каждый раз,
 *          когда он кладет туда новые честно заработанные драгоценности, он вынужден открывать замок.
 *          Кодовый замок представляет собой n вращающихся дисков с написанными на них цифрами от 0 до 9. Скрудж МакДак
 *          должен повернуть некоторые из дисков так, чтобы последовательность цифр на дисках образовала секретную
 *          комбинацию. За одно действие он может прокрутить один из дисков на одну цифру вперед или назад.
 *          В частности, за одно действие можно перейти от цифры 0 к цифре 9 и наоборот. Какое минимальное количество
 *          действий ему для этого потребуется?
 *  Входные данные: В первой строке записано единственное целое число n (1 ≤ n ≤ 1000) — количество дисков на замке.
 *                  Во второй строке записана строка из n цифр — исходное положение дисков.
 *                  В третьей строке записана строка из n цифр — комбинация Скруджа МакДака, открывающая замок.
 *  Выходные данные: Выведите целое число — минимальное количество действий, за которое Скрудж МакДак откроет замок.
 */

#include <iostream>
#include <math.h>

int main()
{
    int n, int_pos, int_word;
    std::cin >> n;

    int* pos = new int[n];
    int* word = new int[n];

    std::cin >> int_pos >> int_word;

    for (int i = n - 1; i >= 0; --i) {
        if (i == n - 1) {
            pos[n - i - 1] = int_pos / (int) pow(10, i);
        } else {
            pos[n - i - 1] = (int_pos / (int) pow(10, i)) % 10;
        }
    }

    for (int i = n - 1; i >= 0; --i) {
        if (i == n - 1) {
            word[n - i - 1] = int_word / (int) pow(10, i);
        } else {
            word[n - i - 1] = (int_word / (int) pow(10, i)) % 10;
        }
    }

    int sum = 0;

    for (int j = 0; j < n; ++j) {
        if (abs(pos[j] - word[j]) > 5) {
            sum += 10 - abs(pos[j] - word[j]);
        } else {
            sum += abs(pos[j] - word[j]);
        }
    }

    std::cout << std::endl << sum << std::endl;

    delete[] pos;
    delete[] word;

    return 0;
}